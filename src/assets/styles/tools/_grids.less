//----------------------------------------------
//  flex-grid();
//  Creates grid blocks via flexbox

//  @param: @xsm, @sm, @med, @lg, @xl - @media sizes
//  @param: @pad - item padding
//  @useage: @include flex-grid(1, 2, 3, 4, 1%);

//  @note: Can replace universal selector with '& > #{@item}''  (@item:'article')
//----------------------------------------------
.flex-grid(
  @xs: ~'';
  @sm: ~'';
  @med: ~'';
  @lg: ~'';
  @xl: ~'';
  @xxl: ~'';
  @pad-vert:0;
  @pad-horz:0;
  @align:null;
) {
  display: flex;
  flex-direction: row;
  flex-flow: wrap;

  & when not (@align) {
    align-items: @align;
  }

  margin-left: -@pad-horz;
  margin-right: -@pad-horz;

  & > * {
    padding-top: @pad-vert;
    padding-bottom: @pad-vert;
    padding-left: @pad-horz;
    padding-right: @pad-horz;
    flex-basis: 100%/@xs;
    max-width: 100%/@xs;

    & when not (@sm = ~'') {
      @media(min-width: @mq-sm){
        flex-basis: 100%/@sm;
        max-width: 100%/@sm;
      }
    }

    & when not (@med = ~'') {
      @media(min-width: @mq-med){
        flex-basis: 100%/@med;
        max-width: 100%/@med;
      }
    }

    & when not (@lg = ~'') {
      @media(min-width: @mq-lg){
        flex-basis: 100%/@lg;
        max-width: 100%/@lg;
      }
    }

    & when not (@xl = ~'') {
      @media(min-width: @mq-xl){
        flex-basis: 100%/@xl;
        max-width: 100%/@xl;
      }
    }

    & when not (@xxl = ~'') {
      @media(min-width: @mq-xxl){
        flex-basis: 100%/@xxl;
        max-width: 100%/@xxl;
      }
    }
  }
  &.-center{
    justify-content: center;
  }
}

//----------------------------------------------
//  Flex Row
//  A helper to create flex rows
//
//  @param align - vert alignment
//  @param @justify - horx positioning
//  @param @wrap - wrap / no-wrap
//  @mobile @mobile (boolean) - start row on mobile
//----------------------------------------------
.flex-row(
  @align:  ~'';
  @justify: ~'';
  @direction:  ~'';
  @wrap: wrap;
  @col-pad: ~'';
  @mobile:false;
){
  & when not (@align = ~'') {
    align-items: @align;
  }
  & when not (@justify = ~'') {
    justify-content: @justify;
  }
  & when not (@direction = ~'') {
    flex-direction: @direction;
  }
  & when (@mobile = true) {
    display: flex;
    flex-wrap: wrap;
  }
  & when not (@mobile = ~'') {
    @media (min-width: @mq-med){
      display: flex;
      flex-wrap: @wrap;
    }
  }
  & when not (@col-pad = ~'') {
    @media (min-width: @mq-med) {
      margin-left: -@col-pad;
      margin-right: -@col-pad;
    }
    & > * {
      @media (min-width: @mq-med) {
        padding-left: @col-pad;
        padding-right: @col-pad
      }
    }
  }

  & when (@mobile = true) and not (@col-pad = ~''){
    margin-left: -@col-pad;
    margin-right: -@col-pad;

    & > * {
      padding-left: @col-pad;
      padding-right: @col-pad
    }
  }
}

//----------------------------------------------
//  Flex Column
//  A helper to output cross browser requirements for
//  columns inside a flexbox parent. flex-basis isn't
//  enough in all cases.
//
//  @param @width (size), @mobile (boolean)
//----------------------------------------------
.flex-col(
  @xs: ~'';
  @sm: ~'';
  @med: ~'';
  @lg: ~'';
  @xl: ~'';
  @xxl:~'';
) {
  flex-basis: @xs;
  width: @xs;
  max-width: @xs;
  & when not (@sm = ~'')  {
    @media (min-width: @mq-sm){
      flex-basis: @sm;
      width: @sm;
      max-width: @sm;
    }
  }
  & when not (@med = ~'') {
    @media (min-width: @mq-med){
      flex-basis: @med;
      width: @med;
      max-width: @med;
    }
  }

  & when not (@lg = ~'') {
    @media (min-width:@mq-lg) {
      flex-basis: @lg;
      width: @lg;
      max-width: @lg;
    }
  }

  & when not (@xl = ~''){
    @media (min-width:@mq-xl) {
      flex-basis: @xl;
      width: @xl;
      max-width: @xl;
    }
  }
  & when not (@xxl = ~''){
    @media (min-width:@mq-xxl) {
      flex-basis: @xxl;
      width: @xxl;
      max-width: @xxl;
    }
  }
}

//----------------------------------------------
//  flex-order()
//  A helper to change an elements order at various
//  breaks, via flex.
//
//  @param @sm, @med, @lg, @xl (breaks)
//----------------------------------------------
.flex-order(
  @sm: ~'';
  @med:  ~'';
  @lg:  ~'';
  @xl:~'';
){
  order: @sm;

  & when not (@med = ~'') {
    @media (min-width: @mq-med) {
      order: @med;
    }
  }

  & when not (@lg = ~'') {
    @media (min-width: @mq-lg) {
      order: @lg;
    }
  }

  & when not (@xl = ~'') {
    @media (min-width: @mq-xl) {
      order: @xl;
    }
  }
}
